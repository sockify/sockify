basePath: /api/v1
definitions:
  types.Admin:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      username:
        type: string
    type: object
  types.AuthToken:
    properties:
      token:
        type: string
    type: object
  types.CreateSockRequest:
    properties:
      sock:
        $ref: '#/definitions/types.Sock'
      variants:
        items:
          $ref: '#/definitions/types.SockVariant'
        type: array
    required:
    - variants
    type: object
  types.LoginAdminRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  types.Message:
    properties:
      message:
        type: string
    type: object
  types.RegisterAdminRequest:
    properties:
      email:
        type: string
      firstname:
        maxLength: 16
        minLength: 2
        type: string
      lastname:
        maxLength: 16
        minLength: 1
        type: string
      password:
        maxLength: 16
        minLength: 8
        type: string
      username:
        maxLength: 16
        minLength: 3
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - username
    type: object
  types.Sock:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      previewImageUrl:
        type: string
    required:
    - name
    - previewImageUrl
    type: object
  types.SockVariant:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      price:
        type: number
      quantity:
        minimum: 0
        type: integer
      size:
        enum:
        - S
        - M
        - LG
        - XL
        type: string
      sockId:
        type: integer
    required:
    - price
    - quantity
    - size
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for the Sockify e-commerce store.
  license:
    name: MIT
    url: https://github.com/sockify/sockify/blob/main/LICENSE
  title: Sockify API
  version: "1.0"
paths:
  /admins:
    get:
      description: Retrieves a list of all admins.
      parameters:
      - default: 50
        description: Results per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Page number
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Admin'
            type: array
      security:
      - Bearer: []
      summary: Get all admins.
      tags:
      - Admins
  /admins/login:
    post:
      consumes:
      - application/json
      description: Logs in an admin using username and password credentials.
      parameters:
      - description: Login credentials
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/types.LoginAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthToken'
      summary: Logs in an admin.
      tags:
      - Admins
  /admins/register:
    post:
      consumes:
      - application/json
      description: Creates a new set of admin credentials.
      parameters:
      - description: Register credentials
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/types.RegisterAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Registers new admin credentials.
      tags:
      - Admins
  /socks:
    post:
      consumes:
      - application/json
      description: Adds a new sock to the store with its variants
      parameters:
      - description: Sock Data
        in: body
        name: sock
        required: true
        schema:
          $ref: '#/definitions/types.CreateSockRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.Message'
      summary: Create a new sock
securityDefinitions:
  Bearer:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      XXX"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
