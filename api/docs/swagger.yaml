basePath: /api/v1
definitions:
  types.Address:
    properties:
      aptUnit:
        type: string
      state:
        type: string
      street:
        type: string
      zipcode:
        type: string
    type: object
  types.Admin:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      username:
        type: string
    type: object
  types.AdminsPaginatedResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.Admin'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  types.CheckoutItem:
    properties:
      quantity:
        description: Quantity must be a pointer for the "required" validator to work
          with 0 as an input.
        minimum: 0
        type: integer
      sockVariantId:
        type: integer
    required:
    - quantity
    - sockVariantId
    type: object
  types.CheckoutOrderRequest:
    properties:
      address:
        $ref: '#/definitions/types.Address'
      contact:
        $ref: '#/definitions/types.Contact'
      items:
        items:
          $ref: '#/definitions/types.CheckoutItem'
        type: array
    required:
    - contact
    - items
    type: object
  types.Contact:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
    type: object
  types.CreateOrderUpdateRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  types.CreateSockRequest:
    properties:
      sock:
        $ref: '#/definitions/types.SockDTO'
      variants:
        items:
          $ref: '#/definitions/types.SockVariantDTO'
        type: array
    required:
    - sock
    - variants
    type: object
  types.CreateSockResponse:
    properties:
      sockId:
        type: integer
    type: object
  types.LoginAdminRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  types.LoginAdminResponse:
    properties:
      token:
        type: string
    type: object
  types.Message:
    properties:
      message:
        type: string
    type: object
  types.Order:
    properties:
      address:
        $ref: '#/definitions/types.Address'
      contact:
        $ref: '#/definitions/types.Contact'
      createdAt:
        type: string
      invoiceNumber:
        type: string
      items:
        items:
          $ref: '#/definitions/types.OrderItem'
        type: array
      orderId:
        type: integer
      status:
        type: string
      total:
        type: number
    type: object
  types.OrderItem:
    properties:
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      size:
        type: string
    type: object
  types.OrderUpdate:
    properties:
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/types.OrderUpdateCreator'
      id:
        type: integer
      message:
        type: string
    type: object
  types.OrderUpdateCreator:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      username:
        type: string
    type: object
  types.OrdersPaginatedResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.Order'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  types.RegisterAdminRequest:
    properties:
      email:
        type: string
      firstname:
        maxLength: 16
        minLength: 2
        type: string
      lastname:
        maxLength: 16
        minLength: 1
        type: string
      password:
        maxLength: 16
        minLength: 8
        type: string
      username:
        maxLength: 16
        minLength: 3
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - username
    type: object
  types.Sock:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      previewImageUrl:
        type: string
      variants:
        items:
          $ref: '#/definitions/types.SockVariant'
        type: array
    type: object
  types.SockDTO:
    properties:
      description:
        type: string
      name:
        type: string
      previewImageUrl:
        type: string
    required:
    - description
    - name
    - previewImageUrl
    type: object
  types.SockVariant:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      size:
        type: string
    type: object
  types.SockVariantDTO:
    properties:
      price:
        type: number
      quantity:
        description: Quantity must be a pointer for the "required" validator to work
          with 0 as an input.
        minimum: 0
        type: integer
      size:
        enum:
        - S
        - M
        - LG
        - XL
        type: string
    required:
    - price
    - quantity
    - size
    type: object
  types.SocksPaginatedResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/types.Sock'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  types.StripeCheckoutResponse:
    properties:
      order:
        allOf:
        - $ref: '#/definitions/types.Order'
        description: 'TODO: remove'
      sessionId:
        description: Stripe session ID
        type: string
    type: object
  types.UpdateAddressRequest:
    properties:
      aptUnit:
        type: string
      state:
        enum:
        - AL
        - AK
        - AZ
        - AR
        - CA
        - CO
        - CT
        - DE
        - FL
        - GA
        - HI
        - ID
        - IL
        - IN
        - IA
        - KS
        - KY
        - LA
        - ME
        - MD
        - MA
        - MI
        - MN
        - MS
        - MO
        - MT
        - NE
        - NV
        - NH
        - NJ
        - NM
        - NY
        - NC
        - ND
        - OH
        - OK
        - OR
        - PA
        - RI
        - SC
        - SD
        - TN
        - TX
        - UT
        - VT
        - VA
        - WA
        - WV
        - WI
        - WY
        type: string
      street:
        maxLength: 100
        type: string
      zipcode:
        maxLength: 10
        type: string
    required:
    - state
    - street
    - zipcode
    type: object
  types.UpdateContactRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    required:
    - email
    - firstName
    - lastName
    - phone
    type: object
  types.UpdateOrderStatusRequest:
    properties:
      message:
        type: string
      newStatus:
        enum:
        - received
        - shipped
        - delivered
        - canceled
        - returned
        type: string
    required:
    - message
    - newStatus
    type: object
  types.UpdateSockRequest:
    properties:
      sock:
        $ref: '#/definitions/types.SockDTO'
      variants:
        items:
          $ref: '#/definitions/types.SockVariantDTO'
        type: array
    required:
    - sock
    - variants
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for the Sockify e-commerce store.
  license:
    name: MIT
    url: https://github.com/sockify/sockify/blob/main/LICENSE
  title: Sockify API
  version: "1.0"
paths:
  /admins:
    get:
      description: Retrieves a list of all admins.
      parameters:
      - default: 50
        description: Results per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Page number
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AdminsPaginatedResponse'
      security:
      - Bearer: []
      summary: Get all admins.
      tags:
      - Admins
  /admins/{admin_id}:
    get:
      description: Retrieves all of an admins relevant information.
      parameters:
      - description: Admin ID
        in: path
        name: admin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Admin'
      security:
      - Bearer: []
      summary: Get details of a specific admin
      tags:
      - Admins
  /admins/login:
    post:
      consumes:
      - application/json
      description: Logs in an admin using username and password credentials.
      parameters:
      - description: Login credentials
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/types.LoginAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginAdminResponse'
      summary: Logs in an admin.
      tags:
      - Admins
  /admins/register:
    post:
      consumes:
      - application/json
      description: Creates a new set of admin credentials.
      parameters:
      - description: Register credentials
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/types.RegisterAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Registers new admin credentials.
      tags:
      - Admins
  /cart/checkout/stripe-session:
    post:
      consumes:
      - application/json
      description: Creates a new Stripe checkout session after creating a "pending"
        order in the database. The "orderId" is attached within the metadata.
      parameters:
      - description: Order to checkout
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.CheckoutOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.StripeCheckoutResponse'
      summary: Creates a Stripe checkout session
      tags:
      - Cart
  /orders:
    get:
      description: Retrieves all orders from the database with optional filters.
      parameters:
      - default: 50
        description: Limit the number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Status of the order
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OrdersPaginatedResponse'
      security:
      - Bearer: []
      summary: Retrieve all orders
      tags:
      - Orders
  /orders/{order_id}:
    get:
      description: Retrieves all the details for a particular order.
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Order'
      security:
      - Bearer: []
      summary: Retrieve details for an order
      tags:
      - Orders
  /orders/{order_id}/address:
    patch:
      consumes:
      - application/json
      description: Updates the address for a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: New Address Data
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Update the address of an existing order
      tags:
      - Orders
  /orders/{order_id}/contact:
    patch:
      consumes:
      - application/json
      description: Updates the contact information (name, email, phone) for a specific
        order by ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: New Contact Information
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/types.UpdateContactRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Update the contact information of an existing order
      tags:
      - Orders
  /orders/{order_id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status for a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: New order status
        in: body
        name: statusUpdate
        required: true
        schema:
          $ref: '#/definitions/types.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Update the status of an existing order
      tags:
      - Orders
  /orders/{order_id}/updates:
    get:
      description: Retrieves all order updates for a particular order. Results are
        sorted descending by createdAt.
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.OrderUpdate'
            type: array
      security:
      - Bearer: []
      summary: Retrieve updates for an order
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Creates a new update for an existing order.
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: New order update
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.CreateOrderUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Creates an update for an order
      tags:
      - Orders
  /orders/invoice/{invoice_number}:
    get:
      description: Retrieves order details and item list by invoice number.
      parameters:
      - description: Invoice Number
        in: path
        name: invoice_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Order'
      security:
      - Bearer: []
      summary: Retrieve order details by invoice number
      tags:
      - Orders
  /socks:
    get:
      description: Returns a list of paginated socks sorted in descending order by
        created date
      parameters:
      - default: 50
        description: Limit the number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SocksPaginatedResponse'
      summary: Get all socks
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Adds a new sock to the store with its variants
      parameters:
      - description: Sock Data
        in: body
        name: sock
        required: true
        schema:
          $ref: '#/definitions/types.CreateSockRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.CreateSockResponse'
      security:
      - Bearer: []
      summary: Create a new sock
      tags:
      - Inventory
  /socks/{sock_id}:
    delete:
      description: Deletes a sock from the store by its ID
      parameters:
      - description: Sock ID
        in: path
        name: sock_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Delete a sock
      tags:
      - Inventory
    get:
      description: Retrieve the details of a sock by its ID
      parameters:
      - description: Sock ID
        in: path
        name: sock_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Sock'
      summary: Get details of a specific sock
      tags:
      - Inventory
    patch:
      consumes:
      - application/json
      description: Updates all of the details for a sock given a sock ID
      parameters:
      - description: Sock ID
        in: path
        name: sock_id
        required: true
        type: integer
      - description: Updated sock details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/types.UpdateSockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Message'
      security:
      - Bearer: []
      summary: Updates the details of a sock
      tags:
      - Inventory
securityDefinitions:
  Bearer:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      XXX"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
